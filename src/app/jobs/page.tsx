// Ï±ÑÏö© Î¶¨Ïä§Ìä∏ ÌéòÏù¥ÏßÄ
'use client';

import React, { useState } from 'react';
import { Search, MapPin, Calendar, Users, Star, ExternalLink, Bookmark, BookmarkCheck } from 'lucide-react';
import Header from '@/components/Header';

// Types
interface Job {
    id: number;
    company: string;
    logo: string;
    position: string;
    department: string;
    type: string;
    location: string;
    salary: string;
    deadline: string;
    experience: string;
    tags: string[];
    description: string;
    rating: number; // Ïò§Ìîà ÏõåÌÅ¨ ÌèâÏ†ê
    standardScore: number;
    bookmarked: boolean;
    isNew: boolean;
    companySize: string;
    industry: string;
}

// Mock Data
const mockJobs: Job[] = [
    {
        id: 1,
        company: 'ÏÜåÎãà (Sony)',
        logo: 'üéÆ',
        position: 'AI ÏóîÏßÄÎãàÏñ¥',
        department: 'R&DÏÑºÌÑ∞',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÎèÑÏøÑ',
        salary: 'Ïó∞Î¥â 600~900ÎßåÏóî',
        deadline: '2024-09-15',
        experience: 'Ïã†ÏûÖ~3ÎÖÑ',
        tags: ['AI', 'Python', 'TensorFlow', 'ÏùºÎ≥∏Ïñ¥ N2'],
        description: 'PlayStationÏùò Ï∞®ÏÑ∏ÎåÄ AI Í∏∞Ïà† Í∞úÎ∞úÏùÑ Îã¥ÎãπÌï† ÏóîÏßÄÎãàÏñ¥Î•º Î™®ÏßëÌï©ÎãàÎã§.',
        rating: 4.2,
        standardScore: 75,
        bookmarked: false,
        isNew: true,
        companySize: 'ÎåÄÍ∏∞ÏóÖ',
        industry: 'IT„ÉªÍ≤åÏûÑ'
    },
    {
        id: 2,
        company: 'ÏÜåÌîÑÌä∏Î±ÖÌÅ¨ (SoftBank)',
        logo: 'üì±',
        position: 'Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïù¥Ïñ∏Ìã∞Ïä§Ìä∏',
        department: 'Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÎ∂Ä',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÎèÑÏøÑ',
        salary: 'Ïó∞Î¥â 550~800ÎßåÏóî',
        deadline: '2024-09-20',
        experience: 'Í≤ΩÎ†• 2ÎÖÑ Ïù¥ÏÉÅ',
        tags: ['Python', 'SQL', 'Î®∏Ïã†Îü¨Îãù', 'AWS'],
        description: 'ÌÜµÏã† ÎπÖÎç∞Ïù¥ÌÑ∞Î•º ÌôúÏö©Ìïú ÎπÑÏ¶àÎãàÏä§ Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú Î∞è ÏòàÏ∏° Î™®Îç∏ Í∞úÎ∞ú',
        rating: 4.1,
        standardScore: 64,
        bookmarked: true,
        isNew: false,
        companySize: 'ÎåÄÍ∏∞ÏóÖ',
        industry: 'IT„ÉªÌÜµÏã†'
    },
    {
        id: 3,
        company: 'ÎùºÏø†ÌÖê (Rakuten)',
        logo: 'üõí',
        position: 'Î∞±ÏóîÎìú Í∞úÎ∞úÏûê',
        department: 'ECÌîåÎû´ÌèºÍ∞úÎ∞úÎ∂Ä',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÎèÑÏøÑ',
        salary: 'Ïó∞Î¥â 500~750ÎßåÏóî',
        deadline: '2024-09-25',
        experience: 'Ïã†ÏûÖ~5ÎÖÑ',
        tags: ['Java', 'Spring', 'Kubernetes', 'Docker'],
        description: 'ÏùºÎ≥∏ ÏµúÎåÄ Ïù¥Ïª§Î®∏Ïä§ ÌîåÎû´ÌèºÏùò Î∞±ÏóîÎìú ÏãúÏä§ÌÖú Í∞úÎ∞ú Î∞è Ïö¥ÏòÅ',
        rating: 4.0,
        standardScore: 64,
        bookmarked: false,
        isNew: true,
        companySize: 'ÎåÄÍ∏∞ÏóÖ',
        industry: 'IT„ÉªÏù¥Ïª§Î®∏Ïä§'
    },
    {
        id: 4,
        company: 'Î©îÎ•¥Ïπ¥Î¶¨ (Mercari)',
        logo: 'üí∏',
        position: 'ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûê',
        department: 'ÌîåÎû´ÌèºÍ∞úÎ∞úÌåÄ',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÎèÑÏøÑ',
        salary: 'Ïó∞Î¥â 480~700ÎßåÏóî',
        deadline: '2024-09-30',
        experience: 'Í≤ΩÎ†• 1ÎÖÑ Ïù¥ÏÉÅ',
        tags: ['React', 'TypeScript', 'Next.js', 'GraphQL'],
        description: 'Ï§ëÍ≥†Í±∞Îûò Ïï±Ïùò ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ìñ•ÏÉÅÏùÑ ÏúÑÌïú ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞ú',
        rating: 4.3,
        standardScore: 70,
        bookmarked: false,
        isNew: false,
        companySize: 'Î©îÍ∞ÄÎ≤§Ï≤ò',
        industry: 'IT„ÉªÏÑúÎπÑÏä§'
    },
    {
        id: 5,
        company: 'ÎèÑÏöîÌÉÄ (Toyota)',
        logo: 'üöó',
        position: 'ÏûêÏú®Ï£ºÌñâ ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏóîÏßÄÎãàÏñ¥',
        department: 'Î™®ÎπåÎ¶¨Ìã∞ Í∞úÎ∞úÎ≥∏Î∂Ä',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÏïÑÏù¥ÏπòÌòÑ',
        salary: 'Ïó∞Î¥â 650~950ÎßåÏóî',
        deadline: '2024-10-05',
        experience: 'Í≤ΩÎ†• 3ÎÖÑ Ïù¥ÏÉÅ',
        tags: ['C++', 'ROS', 'ÏûêÏú®Ï£ºÌñâ', 'Computer Vision'],
        description: 'Ï∞®ÏÑ∏ÎåÄ ÏûêÏú®Ï£ºÌñâ ÏãúÏä§ÌÖú Í∞úÎ∞ú Î∞è Ïã§Ï∞® ÌÖåÏä§Ìä∏ Îã¥Îãπ',
        rating: 4.4,
        standardScore: 72,
        bookmarked: true,
        isNew: true,
        companySize: 'ÎåÄÍ∏∞ÏóÖ',
        industry: 'Ï†úÏ°∞ÏóÖ„ÉªÏûêÎèôÏ∞®'
    },
    {
        id: 6,
        company: 'ÌõÑÏßÄÏØî (Fujitsu)',
        logo: 'üíª',
        position: 'ÌÅ¥ÎùºÏö∞Îìú ÏïÑÌÇ§ÌÖçÌä∏',
        department: 'DXÏÜîÎ£®ÏÖòÎ∂Ä',
        type: 'Ï†ïÍ∑úÏßÅ',
        location: 'ÎèÑÏøÑ',
        salary: 'Ïó∞Î¥â 580~820ÎßåÏóî',
        deadline: '2024-10-10',
        experience: 'Í≤ΩÎ†• 4ÎÖÑ Ïù¥ÏÉÅ',
        tags: ['AWS', 'Azure', 'Terraform', 'DevOps'],
        description: 'ÏóîÌÑ∞ÌîÑÎùºÏù¥Ï¶à ÌÅ¥ÎùºÏö∞Îìú ÏÜîÎ£®ÏÖò ÏÑ§Í≥Ñ Î∞è Íµ¨Ï∂ï',
        rating: 3.9,
        standardScore: 69,
        bookmarked: false,
        isNew: false,
        companySize: 'ÎåÄÍ∏∞ÏóÖ',
        industry: 'IT„ÉªÏÑúÎπÑÏä§'
    }
];

// Filter Options
const categories = ['Ï†ÑÏ≤¥', 'IT„ÉªÍ∞úÎ∞ú', 'AI„ÉªÎç∞Ïù¥ÌÑ∞', 'Í≤åÏûÑ', 'Ï†úÏ°∞ÏóÖ', 'Í∏àÏúµ', 'Ïª®ÏÑ§ÌåÖ'];
const locations = ['Ï†ÑÏ≤¥', 'ÎèÑÏøÑ', 'Ïò§ÏÇ¨Ïπ¥', 'ÏïÑÏù¥ÏπòÌòÑ', 'Í∞ÄÎÇòÍ∞ÄÏôÄÌòÑ', 'ÌõÑÏø†Ïò§Ïπ¥'];
const companySizes = ['Ï†ÑÏ≤¥', 'ÎåÄÍ∏∞ÏóÖ', 'Î©îÍ∞ÄÎ≤§Ï≤ò', 'Ïò§Ïò§ÌÖå'];
const experiences = ['Ï†ÑÏ≤¥', 'Ïã†ÏûÖ', 'Í≤ΩÎ†• 1ÎÖÑ', 'Í≤ΩÎ†• 3ÎÖÑ', 'Í≤ΩÎ†• 5ÎÖÑ+'];

// JobCard Component
function JobCard({ job, onBookmark }: { job: Job; onBookmark: (jobId: number, bookmarked: boolean) => void }) {
    const [isBookmarked, setIsBookmarked] = useState(job.bookmarked);

    const handleBookmark = (e: React.MouseEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsBookmarked(!isBookmarked);
        onBookmark(job.id, !isBookmarked);
    };

    const getDaysUntilDeadline = (deadline: string) => {
        const today = new Date();
        const deadlineDate = new Date(deadline);
        const diffTime = deadlineDate.getTime() - today.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    };

    const daysLeft = getDaysUntilDeadline(job.deadline);

    return (
        <div className="group relative overflow-hidden rounded-2xl border border-gray-200 bg-white p-6 shadow-md transition-all duration-300 hover:-translate-y-1 hover:shadow-xl hover:border-indigo-200">
            {/* New Badge */}
            {job.isNew && (
                <div className="absolute right-4 top-4 rounded-full bg-gradient-to-r from-rose-400 to-orange-400 px-3 py-1 text-xs font-bold text-white">
                    NEW
                </div>
            )}

            {/* Bookmark Button */}
            <button
                onClick={handleBookmark}
                className="absolute right-4 top-12 rounded-full bg-white p-2 shadow-md transition-all hover:scale-110 hover:shadow-lg"
            >
                {isBookmarked ? (
                    <BookmarkCheck className="h-5 w-5 text-indigo-500" />
                ) : (
                    <Bookmark className="h-5 w-5 text-gray-400" />
                )}
            </button>

            {/* Company Header */}
            <div className="mb-4 flex items-start gap-4">
                <div className="text-4xl">{job.logo}</div>
                <div className="flex-1">
                    <div className="flex items-center gap-2">
                        <h3 className="text-lg font-bold text-gray-800">{job.company}</h3>
                        {/* Rating */}
                        <div className="flex items-center gap-1 text-sm text-orange-500">
                            <Star className="h-4 w-4 fill-current" />
                            <span>{job.rating}</span>
                        </div>
                        {/* Standard Score */}
                        {/* To Do: ÎßàÏö∞Ïä§ Ïò¨Î¶¨Î©¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú ex) IT Ìé∏Ï∞®: 65, Ï¢ÖÌï© Ìé∏Ï∞®: 70  (Ïù¥ Ï†ïÎ≥¥Îäî Corp-ratings(ÎßÅÌÅ¨) ÏÇ¨Ïù¥Ìä∏ Í∏∞Ï§ÄÏûÖÎãàÎã§.) */}
                        <div className="flex items-center gap-1">
                            <div className={`px-2 py-0.5 rounded-full text-xs font-bold ${job.standardScore >= 70
                                    ? 'bg-gradient-to-r from-emerald-500 to-teal-500 text-white'
                                    : job.standardScore >= 60
                                        ? 'bg-gradient-to-r from-blue-500 to-indigo-500 text-white'
                                        : 'bg-gradient-to-r from-slate-400 to-gray-500 text-white'
                                }`}>
                                Ìé∏Ï∞® {job.standardScore}
                            </div>
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">{job.companySize} ‚Ä¢ {job.industry}</p>
                </div>
            </div>

            {/* Job Info */}
            <div className="mb-4">
                <h4 className="mb-2 text-xl font-bold text-gray-900">{job.position}</h4>
                <p className="mb-3 text-sm text-gray-600 line-clamp-2">{job.description}</p>

                <div className="mb-3 flex flex-wrap items-center gap-4 text-sm text-gray-600">
                    <div className="flex items-center gap-1">
                        <MapPin className="h-4 w-4" />
                        <span>{job.location}</span>
                    </div>
                    <div className="flex items-center gap-1">
                        <Users className="h-4 w-4" />
                        <span>{job.experience}</span>
                    </div>
                    <div className="flex items-center gap-1">
                        <Calendar className="h-4 w-4" />
                        <span className={daysLeft <= 7 ? 'text-red-500 font-medium' : ''}>
                            {daysLeft > 0 ? `${daysLeft}Ïùº ÎÇ®Ïùå` : 'ÎßàÍ∞ê'}
                        </span>
                    </div>
                </div>

                <div className="mb-4">
                    <p className="text-lg font-bold text-indigo-600">{job.salary}</p>
                </div>
            </div>

            {/* Tags */}
            <div className="mb-4 flex flex-wrap gap-2">
                {job.tags.slice(0, 4).map((tag, index) => (
                    <span
                        key={index}
                        className="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700 transition-colors group-hover:bg-indigo-50 group-hover:text-indigo-600"
                    >
                        {tag}
                    </span>
                ))}
                {job.tags.length > 4 && (
                    <span className="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-500">
                        +{job.tags.length - 4}
                    </span>
                )}
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2">
                {/*ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô */}
                <button className="flex-1 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 py-2 px-4 text-sm font-semibold text-white transition-all hover:-translate-y-0.5 hover:shadow-lg">
                    ÏÉÅÏÑ∏ Î≥¥Í∏∞
                </button>
                {/* Í∏∞ÏóÖ Ï±ÑÏö© Í≥µÍ≥† ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô */}
                <button className="flex-1 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 py-2 px-4 text-sm font-semibold text-white transition-all hover:-translate-y-0.5 hover:shadow-lg">
                    ÏßÄÏõêÌïòÍ∏∞
                </button>
                <button className="rounded-lg border border-gray-300 p-2 text-gray-600 transition-all hover:border-indigo-300 hover:text-indigo-600">
                    <ExternalLink className="h-4 w-4" />
                </button>
            </div>
        </div>
    );
}

// FilterSection Component
function FilterSection({ title, options, selected, onSelect }: {
    title: string;
    options: string[];
    selected: string;
    onSelect: (option: string) => void;
}) {
    return (
        <div className="space-y-2">
            <h4 className="font-medium text-gray-800">{title}</h4>
            <div className="flex flex-wrap gap-2">
                {options.map((option) => (
                    <button
                        key={option}
                        onClick={() => onSelect(option)}
                        className={`rounded-full px-3 py-1 text-sm transition-all ${selected === option
                                ? 'bg-indigo-500 text-white'
                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                            }`}
                    >
                        {option}
                    </button>
                ))}
            </div>
        </div>
    );
}

// Main Component
export default function JobListPage() {
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('Ï†ÑÏ≤¥');
    const [selectedLocation, setSelectedLocation] = useState('Ï†ÑÏ≤¥');
    const [selectedCompanySize, setSelectedCompanySize] = useState('Ï†ÑÏ≤¥');
    const [selectedExperience, setSelectedExperience] = useState('Ï†ÑÏ≤¥');
    const [jobs, setJobs] = useState(mockJobs);
    const [sortBy, setSortBy] = useState('latest');

    // Filter jobs based on selected criteria
    const filteredJobs = jobs.filter(job => {
        const matchesSearch = job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||
            job.position.toLowerCase().includes(searchTerm.toLowerCase()) ||
            job.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));

        const matchesCategory = selectedCategory === 'Ï†ÑÏ≤¥' || job.industry.includes(selectedCategory);
        const matchesLocation = selectedLocation === 'Ï†ÑÏ≤¥' || job.location === selectedLocation;
        const matchesCompanySize = selectedCompanySize === 'Ï†ÑÏ≤¥' || job.companySize === selectedCompanySize;
        const matchesExperience = selectedExperience === 'Ï†ÑÏ≤¥' || job.experience.includes(selectedExperience);

        return matchesSearch && matchesCategory && matchesLocation && matchesCompanySize && matchesExperience;
    });

    // Sort jobs
    const sortedJobs = [...filteredJobs].sort((a, b) => {
        switch (sortBy) {
            case 'latest':
                return new Date(b.deadline).getTime() - new Date(a.deadline).getTime();
            case 'salary':
                const getSalaryNum = (salary: string) => {
                    const match = salary.match(/\d+/);
                    return match ? parseInt(match[0]) : 0;
                };
                return getSalaryNum(b.salary) - getSalaryNum(a.salary);
            case 'rating':
                return b.rating - a.rating;
            case 'deadline':
                return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
            default:
                return 0;
        }
    });

    const handleBookmark = (jobId: number, bookmarked: boolean) => {
        setJobs(jobs.map(job =>
            job.id === jobId ? { ...job, bookmarked } : job
        ));
    };

    const resetFilters = () => {
        setSelectedCategory('Ï†ÑÏ≤¥');
        setSelectedLocation('Ï†ÑÏ≤¥');
        setSelectedCompanySize('Ï†ÑÏ≤¥');
        setSelectedExperience('Ï†ÑÏ≤¥');
        setSearchTerm('');
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
            <Header />

            {/* Header Section */}
            <div className="bg-white shadow-sm pt-20">
                <div className="mx-auto max-w-7xl px-4 py-6">
                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                                Ï±ÑÏö©Ï†ïÎ≥¥
                            </h1>
                            <p className="mt-1 text-gray-600">
                                ÏùºÎ≥∏ ÎåÄÍ∏∞ÏóÖÏùò ÏµúÏã† Ï±ÑÏö©Í≥µÍ≥†Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî
                            </p>
                        </div>
                        <div className="text-right">
                            <p className="text-2xl font-bold text-indigo-600">{sortedJobs.length}</p>
                            <p className="text-sm text-gray-600">Í∞úÏùò Ï±ÑÏö©Í≥µÍ≥†</p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="mx-auto max-w-7xl px-4 py-8">
                <div className="flex gap-8">
                    {/* Sidebar - Filters */}
                    <div className="w-80 space-y-6 hidden lg:block">
                        <div className="rounded-2xl bg-white p-6 shadow-md sticky top-24">
                            <div className="mb-4 flex items-center justify-between">
                                <h3 className="text-lg font-bold text-gray-800">ÌïÑÌÑ∞</h3>
                                <button
                                    onClick={resetFilters}
                                    className="text-sm text-indigo-600 hover:text-indigo-800 transition-colors"
                                >
                                    Ï¥àÍ∏∞Ìôî
                                </button>
                            </div>

                            {/* Search */}
                            <div className="mb-6">
                                <div className="relative">
                                    <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400" />
                                    <input
                                        type="text"
                                        placeholder="Í∏∞ÏóÖÎ™Ö, ÏßÅÎ¨¥, Í∏∞Ïà†Ïä§ÌÉù Í≤ÄÏÉâ"
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 py-3 pl-10 pr-4 text-sm outline-none transition-colors focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                                    />
                                </div>
                            </div>

                            {/* Sort */}
                            <div className="mb-6">
                                <h4 className="mb-2 font-medium text-gray-800">Ï†ïÎ†¨</h4>
                                <select
                                    value={sortBy}
                                    onChange={(e) => setSortBy(e.target.value)}
                                    className="w-full rounded-lg border border-gray-300 py-2 px-3 text-sm outline-none focus:border-indigo-500"
                                >
                                    <option value="latest">ÏµúÏã†Ïàú</option>
                                    <option value="deadline">ÎßàÍ∞êÏûÑÎ∞ïÏàú</option>
                                    <option value="salary">Ïó∞Î¥âÎÜíÏùÄÏàú</option>
                                    <option value="rating">ÌèâÏ†êÎÜíÏùÄÏàú</option>
                                </select>
                            </div>

                            <div className="space-y-6">
                                <FilterSection
                                    title="ÏßÅÎ¨¥ Ïπ¥ÌÖåÍ≥†Î¶¨"
                                    options={categories}
                                    selected={selectedCategory}
                                    onSelect={setSelectedCategory}
                                />

                                <FilterSection
                                    title="Í∑ºÎ¨¥ÏßÄÏó≠"
                                    options={locations}
                                    selected={selectedLocation}
                                    onSelect={setSelectedLocation}
                                />

                                <FilterSection
                                    title="ÌöåÏÇ¨Í∑úÎ™®"
                                    options={companySizes}
                                    selected={selectedCompanySize}
                                    onSelect={setSelectedCompanySize}
                                />

                                <FilterSection
                                    title="Í≤ΩÎ†•"
                                    options={experiences}
                                    selected={selectedExperience}
                                    onSelect={setSelectedExperience}
                                />
                            </div>
                        </div>
                    </div>

                    {/* Main Content - Job List */}
                    <div className="flex-1">
                        {/* Mobile Search */}
                        <div className="mb-6 lg:hidden">
                            <div className="relative">
                                <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400" />
                                <input
                                    type="text"
                                    placeholder="Í∏∞ÏóÖÎ™Ö, ÏßÅÎ¨¥, Í∏∞Ïà†Ïä§ÌÉù Í≤ÄÏÉâ"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="w-full rounded-lg border border-gray-300 bg-white py-3 pl-10 pr-4 text-sm outline-none transition-colors focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                                />
                            </div>
                        </div>

                        {sortedJobs.length === 0 ? (
                            <div className="rounded-2xl bg-white p-12 text-center shadow-md">
                                <div className="text-6xl mb-4">üîç</div>
                                <h3 className="text-xl font-bold text-gray-800 mb-2">
                                    Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§
                                </h3>
                                <p className="text-gray-600 mb-4">
                                    Îã§Î•∏ Í≤ÄÏÉâÏñ¥ÎÇò ÌïÑÌÑ∞Î•º ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî
                                </p>
                                <button
                                    onClick={resetFilters}
                                    className="rounded-lg bg-indigo-500 px-6 py-2 text-white transition-colors hover:bg-indigo-600"
                                >
                                    ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
                                </button>
                            </div>
                        ) : (
                            <div className="grid gap-6 lg:grid-cols-2">
                                {sortedJobs.map((job) => (
                                    <JobCard
                                        key={job.id}
                                        job={job}
                                        onBookmark={handleBookmark}
                                    />
                                ))}
                            </div>
                        )}

                        {/* Load More Button */}
                        {sortedJobs.length > 0 && (
                            <div className="mt-12 text-center">
                                <button className="rounded-lg border border-gray-300 px-8 py-3 font-medium text-gray-700 transition-all hover:border-indigo-300 hover:text-indigo-600 hover:-translate-y-0.5">
                                    Îçî ÎßéÏùÄ Ï±ÑÏö©Ï†ïÎ≥¥ Î≥¥Í∏∞
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}